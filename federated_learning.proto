syntax = "proto3";

package federated_learning;

// Service definition for federated learning communication
service FederatedLearning {
    // Get the current global model
    rpc GetGlobalModel(GetModelRequest) returns (ModelResponse);

    // Submit local model updates to the server
    rpc SubmitUpdate(ClientUpdate) returns (UpdateResponse);

    // Get the current training status
    rpc GetStatus(StatusRequest) returns (StatusResponse);
}

// Request to get the global model
message GetModelRequest {
    string client_id = 1;
    int32 version = 2; // Client's current model version
}

// Global model response
message ModelResponse {
    bytes model_weights = 1; // Serialized model weights
    int32 round = 2;         // Current training round
    bool is_final = 3;       // Whether this is the final model
}

// Client update submission
message ClientUpdate {
    string client_id = 1;
    int32 round = 2;
    bytes model_update = 3;   // Serialized model update
    int32 num_samples = 4;    // Number of samples used for training
    float training_loss = 5;  // Training loss achieved
    float training_accuracy = 6; // Training accuracy achieved
}

// Response to client update submission
message UpdateResponse {
    bool success = 1;      // Whether the update was accepted
    string message = 2;    // Optional message (e.g., error details)
    int32 next_round = 3;  // Next round number
}

// Request for system status
message StatusRequest {
    string client_id = 1;
}

// System status response
message StatusResponse {
    int32 current_round = 1;             // Current training round
    int32 num_clients_connected = 2;     // Number of connected clients
    int32 num_updates_in_current_round = 3; // Number of updates received in current round
    float global_model_accuracy = 4;     // Current global model accuracy
    float privacy_budget_spent = 5;      // Current privacy budget consumption
}